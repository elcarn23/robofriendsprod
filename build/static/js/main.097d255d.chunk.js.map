{"version":3,"sources":["fonts/SEGA.TTF","components/Card.js","components/Cardlist.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","id","name","email","className","src","alt","Cardlist","cardComponents","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","onChange","type","placeholder","ErrorBoundary","state","hasError","console","log","error","errorInfo","this","setState","React","Component","App","useState","robotsList","setRobotsList","searchField","setSearchField","filteredList","setFilteredList","useEffect","fetch","then","response","json","users","filter","robot","toLowerCase","includes","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,uFCc5BC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAG,UAAKL,KACxD,6BACI,4BAAKC,GACL,2BAAIC,MCkBLI,EAtBE,SAAC,GAAc,IACtBC,EADqB,EAAZC,OACeC,KAAI,SAACC,EAAMC,GACrC,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLX,GAAIU,EAAKV,GACTC,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,WAQxB,OACI,oCACKK,ICVEM,EATA,SAACC,GAEZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/DJ,EAAMK,WCSLC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKlB,UAAU,OACX,2BACImB,SAAWD,EACXlB,UAAU,mCACVoB,KAAK,SACLC,YAAY,oB,4BCsBbC,E,kDA5BX,WAAaX,GAAQ,IAAD,8BAChB,cAAMA,IACDY,MAAQ,CACTC,UAAU,GAHE,E,gEAQhBC,QAAQC,IAAI,oB,wCAGEC,EAAOC,GAErBC,KAAKC,SAAS,CACVH,MAAOA,IAEXF,QAAQC,IAAIC,EAAOC,K,+BAInB,OAAIC,KAAKN,MAAMC,SACJ,2EAGJK,KAAKlB,MAAMK,a,GAzBEe,IAAMC,WC6DnBC,G,MAxDH,WAAM,MAKsBF,IAAMG,SAAS,IALrC,mBAKPC,EALO,KAKKC,EALL,OAMwBL,IAAMG,SAAS,IANvC,mBAMPG,EANO,KAMMC,EANN,OAO0BP,IAAMG,SAAS,IAPzC,mBAOPK,EAPO,KAOOC,EAPP,KAUdT,IAAMU,WAAU,WACZC,MAAM,6CAA6CC,MAAK,SAAAC,GACpD,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJV,EAAcU,QAEnB,IA2BH,OAJAf,IAAMU,WAbkB,WAIpBD,EAAgBL,EAAWY,QAAO,SAAAC,GAC9B,OAAOA,EAAMlD,KAAKmD,cAAcC,SAASb,EAAYY,qBAU3D,CAACZ,EAAaF,IAGZ,yBAAKnC,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWkB,aA1BK,SAACiC,GACrBb,EAAea,EAAMC,OAAOC,UA0BxB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUhD,OAAQkC,SC5ClBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,oCACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLF,QAAQE,MAAMA,EAAM2C,c","file":"static/js/main.097d255d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SEGA.82e09f78.TTF\";","import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt={`${id}`} ></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card","import React from 'react';\nimport Card from './Card';\n\n\nconst Cardlist = ({robots}) => {\n    const cardComponents = robots.map((user, i) => {\n        return (\n            <Card \n                key={i} \n                id={user.id} \n                name={user.name} \n                email={user.email} \n            />\n        );\n    });\n\n    // if (true) {\n    //     throw new Error(\"Test Error\") \n    // } \n    return (\n        <>\n            {cardComponents}\n        </>\n    );\n}\n\nexport default Cardlist;","import React from 'react';\n\nconst Scroll = (props) => {\n    // return props.children;\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            { props.children }\n        </div>\n    );\n}\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                onChange={ searchChange }\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type='search' \n                placeholder='Search Robots' \n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            hasError: false,\n        };\n    }\n\n    componentDidMount() {\n        console.log(\"Error Mounted.\");\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n        this.setState({\n            error: error,\n        });\n        console.log(error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h2>These aren't the droids you're looking for.</h2>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport Cardlist from '../components/Cardlist';\nimport Scroll from '../components/Scroll'\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nconst App = () => {\n    // Common parent between Searchbox and Cardlist\n    // Need to update state here to pass data between\n    // the Search box and the Cardlist\n    // Going to use useState\n    const [robotsList, setRobotsList] = React.useState([]);\n    const [searchField, setSearchField] = React.useState(\"\");\n    const [filteredList, setFilteredList] = React.useState([]);\n\n    // Load up the robots from json placeholder\n    React.useEffect(() => {\n        fetch(\"http://jsonplaceholder.typicode.com/users\").then(response => {\n            return response.json();\n        }).then(users => {\n            setRobotsList(users);\n        })\n    }, []);\n\n    // once we update the search field it wasn't picking up the \n    // new value for the update robots.\n    const onSearchChanged = (event) => {\n        setSearchField(event.target.value);\n    }\n\n    // So in order for the robot list to pick up the change we moved it to a\n    // seperate function to update it outside of the useEffect\n    const updateRobotList = () => {\n        // filteredList = robotsList.filter(robot => {\n        //     return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        // }); \n        setFilteredList(robotsList.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());    \n        }));\n    } \n\n    // Use use effect to track the value of search field\n    // when it is updated call the update robot list function\n    // outside of the effect in order to push the re render on the \n    // new value for the list.\n    React.useEffect(\n        updateRobotList\n    , [searchField, robotsList]);\n\n    return (\n        <div className='tc'>\n            <h1 className=\"f1\">RobotFriends</h1>\n            <SearchBox searchChange={ onSearchChanged } />\n            <Scroll>\n                <ErrorBoundary>\n                    <Cardlist robots={filteredList}></Cardlist>\n                </ErrorBoundary>\n            </Scroll>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './fonts/SEGA.TTF'\n\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <App></App>\n    </>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}